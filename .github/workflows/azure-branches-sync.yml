name: Sync GitHub branches to Azure DevOps

on:
  workflow_call:
    secrets:
      AZURE_PAT:
        required: true

jobs:
  azure_branch_sync:
    runs-on: ubuntu-latest

    env:
      AZURE_ORG: ${{ inputs.azure_org }}
      AZURE_PROJECT: ${{ inputs.azure_project }}
      AZURE_PAT: ${{ secrets.AZURE_PAT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          fetch-tags: false
          
      - name: Fetch all remote branches
        run: git fetch --all --prune

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set context variables
        id: prep
        run: |
          # Extract the repository name from the GitHub repo path
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

          # Detect GitHub event type
          EVENT="${GITHUB_EVENT_NAME}"
          if [ "$EVENT" = "workflow_dispatch" ]; then
            # Manual run - only allowed for 'main' branch!
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            if [ "$BRANCH_NAME" != "main" ]; then
              echo "::error::Manual run ('workflow_dispatch') allowed only for 'main', not for '$BRANCH_NAME'."
              exit 1
            fi
            EVENT="create"
          fi

          # Define pushed or deleted branch name
          if [ "$EVENT" = "delete" ]; then
            BRANCH_NAME=$(jq -r .ref < "$GITHUB_EVENT_PATH")
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          fi

          echo "event=$EVENT" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Detect parent branch (if applicable)
        id: parent
        run: |
          BRANCH_NAME="${{ steps.prep.outputs.branch_name }}"
          EVENT="${{ steps.prep.outputs.event }}"

          
          # For delete event, skip parent branch detection
          if [[ "$EVENT" == "delete" ]]; then
            echo "::notice::Delete event – skipping parent branch detection."
            echo "parent_branch=" >> $GITHUB_OUTPUT
            exit 0
          fi

          PARENT_BRANCH=""

          echo "---- DEBUG ----"
          echo "BRANCH_NAME: $BRANCH_NAME"
          echo "EVENT: $EVENT"

          # Determine BEFORE_SHA based on event type
          BEFORE_SHA=""

          if [[ "$EVENT" == "push" ]]; then
            BEFORE_SHA=$(jq -r '.before // empty' < $GITHUB_EVENT_PATH)
            echo "Detected PUSH event. BEFORE_SHA from event: $BEFORE_SHA"
          elif [[ "$EVENT" == "create" ]]; then
            BEFORE_SHA=$(git rev-parse HEAD)
            echo "Detected CREATE event. BEFORE_SHA from git HEAD: $BEFORE_SHA"
          else
            # Fallback: first try from event, then from HEAD as backup
            BEFORE_SHA=$(jq -r '.before // empty' < $GITHUB_EVENT_PATH)
            if [[ -z "$BEFORE_SHA" || "$BEFORE_SHA" == "null" ]]; then
              BEFORE_SHA=$(git rev-parse HEAD)
              echo "Unknown event type – fallback, BEFORE_SHA from git HEAD: $BEFORE_SHA"
            else
              echo "Unknown event type – fallback, BEFORE_SHA from event: $BEFORE_SHA"
            fi
          fi

          echo "BEFORE_SHA: $BEFORE_SHA"
          echo "Remote branches and their HEAD SHAs:"
          git fetch --all --prune
          git for-each-ref --format='%(refname:short) %(objectname:short)' refs/remotes/origin/
          echo "---------------"

          # If the branch is 'main', we do not need to detect the parent
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "::notice::Branch is 'main', skipping parent branch detection."
            echo "parent_branch=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 1. Try to detect the parent branch using .base_ref (reliable for Pull Request events)
          if jq -e '.base_ref' < $GITHUB_EVENT_PATH > /dev/null; then
            PARENT_BRANCH=$(jq -r '.base_ref' < $GITHUB_EVENT_PATH | sed 's#refs/heads/##')
            if [ -n "$PARENT_BRANCH" ]; then
              echo "::notice::Detected parent branch from .base_ref: $PARENT_BRANCH"
            fi
          fi

          # 2. Fallback: detect parent branch using 'before' SHA (already set properly above)
          if [ -z "$PARENT_BRANCH" ]; then
            if [ -n "$BEFORE_SHA" ] && [ "$BEFORE_SHA" != "0000000000000000000000000000000000000000" ]; then
              MATCHED_BRANCHES=()
              for branch in $(git for-each-ref --format='%(refname:short)' refs/remotes/origin/); do
                BRANCH_SHA=$(git rev-parse "$branch")
                if [ "$BRANCH_SHA" = "$BEFORE_SHA" ]; then
                  CANDIDATE="${branch#origin/}"
                  MATCHED_BRANCHES+=("$CANDIDATE")
                fi
              done

              if [ ${#MATCHED_BRANCHES[@]} -gt 0 ]; then
                for candidate in "${MATCHED_BRANCHES[@]}"; do
                  if [[ "$candidate" == "main" ]]; then
                    PARENT_BRANCH="main"
                    echo "::notice::Detected parent branch from SHA match (prefer main): $PARENT_BRANCH"
                    break
                  fi
                done
                if [ -z "$PARENT_BRANCH" ]; then
                  PARENT_BRANCH="${MATCHED_BRANCHES[0]}"
                  echo "::notice::Detected parent branch from SHA match: $PARENT_BRANCH"
                fi
              fi
            fi
          fi

          # Log the final result or fail if parent could not be detected
          if [[ -z "$PARENT_BRANCH" ]]; then
            echo "::error::Parent branch could not be detected for branch '$BRANCH_NAME' (not main). Aborting."
            exit 1
          else
            echo "::notice::Final detected PARENT_BRANCH: $PARENT_BRANCH"
          fi

          echo "parent_branch=${PARENT_BRANCH}" >> $GITHUB_OUTPUT

      - name: Sync branch to Azure DevOps
        run: |
          set -e
          
          if [[ "${GITHUB_REPOSITORY_OWNER}" == "DodoSystem" ]]; then
            AZURE_REPO="Customers"
          else
            AZURE_REPO="Customers-${GITHUB_REPOSITORY_OWNER}"
          fi

          REPO_NAME="${{ steps.prep.outputs.repo_name }}"
          BRANCH_NAME="${{ steps.prep.outputs.branch_name }}"
          EVENT="${{ steps.prep.outputs.event }}"
          AZURE_BRANCH="${REPO_NAME}/${BRANCH_NAME}"
          PARENT_BRANCH="${{ steps.parent.outputs.parent_branch }}"
          REFS_API="https://dev.azure.com/$AZURE_ORG/$AZURE_PROJECT/_apis/git/repositories/$AZURE_REPO/refs?api-version=7.1"

          echo "====================== BRANCH SYNC CONTEXT ======================"
          echo "Azure Repo name     : $AZURE_REPO"
          echo "Github Repo name    : $REPO_NAME"
          echo "Github Branch name  : $BRANCH_NAME"
          echo "Event type          : $EVENT"
          echo "Azure branch        : $AZURE_BRANCH"
          echo "Detected parent     : $PARENT_BRANCH"
          echo "==============================================================="

          if [[ "$EVENT" == "create" ]]; then

            # 1. Check if branch already exists
            EXISTS=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/$AZURE_BRANCH" \
              | jq -r '.value | map(select(.name=="refs/heads/'"$AZURE_BRANCH"'")) | length')
            if [[ "$EXISTS" -gt "0" ]]; then
              echo "::error::Branch ${AZURE_BRANCH} already exists in Azure DevOps. Branch creation aborted."
              exit 1
            fi

            # 2. Main branch creation: must originate from Azure 'main'            
            if [[ "$BRANCH_NAME" == "main" ]]; then
              echo "::notice::[INFO] Creating the first customer main branch, e.g. 'customer-x/main'."
              MAIN_SHA=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/main" | jq -r '.value[] | select(.name=="refs/heads/main") | .objectId')
              if [[ -z "$MAIN_SHA" || "$MAIN_SHA" == "null" ]]; then
                echo "::error::'main' branch does not exist in Azure DevOps repo. Cannot create initial branch (e.g. 'customer-x/main')."
                exit 1
              fi

              echo "::notice::[INFO] Parent SHA used: $MAIN_SHA (from Azure 'main')"
              PAYLOAD='[{"name": "refs/heads/'"$AZURE_BRANCH"'", "oldObjectId": "0000000000000000000000000000000000000000", "newObjectId": "'$MAIN_SHA'"}]'
              RESPONSE=$(curl -s -u ":$AZURE_PAT" -w "%{http_code}" -o /tmp/curl_output "$REFS_API" -H "Content-Type: application/json" -d "$PAYLOAD")
              if [[ "$RESPONSE" -ne 200 && "$RESPONSE" -ne 201 ]]; then
                OUTPUT=$(cat /tmp/curl_output)
                echo "::error::Failed to create branch ${AZURE_BRANCH} in Azure DevOps (main branch case). Error: $OUTPUT"
                exit 1
              fi
              echo "::notice::✅ Branch '${AZURE_BRANCH}' created in Azure DevOps from parent branch 'main'."

            # 3. Other branches: must have <customer-x>/<parent> as parent in Azure
            else
              if [[ -z "$PARENT_BRANCH" ]]; then
                echo "::error::Parent branch could not be detected (for example, not a pull request or missing 'base_ref'). Aborting."
                exit 1
              fi
              AZURE_PARENT_BRANCH="${REPO_NAME}/${PARENT_BRANCH}"
              echo "::notice::[INFO] Parent expected: ${AZURE_PARENT_BRANCH}"
              AZURE_PARENT_SHA=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/$AZURE_PARENT_BRANCH" \
                | jq -r '.value[] | select(.name=="refs/heads/'"$AZURE_PARENT_BRANCH"'") | .objectId')

              if [[ -z "$AZURE_PARENT_SHA" || "$AZURE_PARENT_SHA" == "null" ]]; then
                echo "::error::Parent branch '${AZURE_PARENT_BRANCH}' does not exist in Azure DevOps repo. Branch creation aborted."
                exit 1
              fi

              echo "::notice::[INFO] Parent SHA used: $AZURE_PARENT_SHA (from branch '${AZURE_PARENT_BRANCH}')"
              PAYLOAD='[{"name": "refs/heads/'"$AZURE_BRANCH"'", "oldObjectId": "0000000000000000000000000000000000000000", "newObjectId": "'$AZURE_PARENT_SHA'"}]'
              RESPONSE=$(curl -s -u ":$AZURE_PAT" -w "%{http_code}" -o /tmp/curl_output "$REFS_API" -H "Content-Type: application/json" -d "$PAYLOAD")
              if [[ "$RESPONSE" -ne 200 && "$RESPONSE" -ne 201 ]]; then
                OUTPUT=$(cat /tmp/curl_output)
                echo "::error::Failed to create branch ${AZURE_BRANCH} in Azure DevOps (feature branch case). Error: $OUTPUT"
                exit 1
              fi
              echo "::notice::✅ Branch '${AZURE_BRANCH}' created in Azure DevOps from parent '${AZURE_PARENT_BRANCH}'."
            fi

          elif [[ "$EVENT" == "delete" ]]; then
            # For branch deletion, always try to delete
            echo "::notice::[INFO] Deleting branch ${AZURE_BRANCH} from Azure Repos."
            RESULT=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/$AZURE_BRANCH")
            BRANCH_SHA=$(echo "$RESULT" | jq -r '.value[] | select(.name=="refs/heads/'"$AZURE_BRANCH"'") | .objectId')
            if [[ -z "$BRANCH_SHA" || "$BRANCH_SHA" == "null" ]]; then
              echo "::warning::Branch ${AZURE_BRANCH} does not exist in Azure DevOps. Skipping deletion."
              exit 0
            fi
            PAYLOAD='[{"name": "refs/heads/'"$AZURE_BRANCH"'", "oldObjectId": "'$BRANCH_SHA'", "newObjectId": "0000000000000000000000000000000000000000"}]'
            RESPONSE=$(curl -s -u ":$AZURE_PAT" -w "%{http_code}" -o /tmp/curl_output -X POST "$REFS_API" -H "Content-Type: application/json" -d "$PAYLOAD")
            if [[ "$RESPONSE" -ne 200 && "$RESPONSE" -ne 201 ]]; then
              OUTPUT=$(cat /tmp/curl_output)
              echo "::error::Failed to delete branch ${AZURE_BRANCH} from Azure DevOps. Error: $OUTPUT"
              exit 1
            fi

            CHECK=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/$AZURE_BRANCH" | jq -r '.value | map(select(.name=="refs/heads/'"$AZURE_BRANCH"'")) | length')
            if [[ "$CHECK" -gt "0" ]]; then
              echo "::error::Branch ${AZURE_BRANCH} still exists after deletion attempt. Most likely permission denied!"
              exit 1
            fi

            echo "::notice::✅ Branch '${AZURE_BRANCH}' deleted in Azure DevOps."
          fi
