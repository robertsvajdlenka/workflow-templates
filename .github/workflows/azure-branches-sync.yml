name: Sync GitHub branches to Azure DevOps

on:
  workflow_call:
    inputs:
      azure_org:
        required: true
        type: string
      azure_project:
        required: true
        type: string
    secrets:
      AZURE_PAT:
        required: true

jobs:
  azure_branch_sync:
    runs-on: ubuntu-latest
    env:
      AZURE_ORG: ${{ inputs.azure_org }}
      AZURE_PROJECT: ${{ inputs.azure_project }}
      AZURE_PAT: ${{ secrets.AZURE_PAT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch all remote branches and tags
        run: |
          git fetch --all --prune
          git fetch --tags

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set context variables
        id: prep
        run: |
          # Extract the repository name from the GitHub repo path
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

          # Detect GitHub event type
          EVENT="${GITHUB_EVENT_NAME}"
          if [ "$EVENT" = "workflow_dispatch" ]; then
            # Manual run - only allowed for 'main' branch!
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            if [ "$BRANCH_NAME" != "main" ]; then
              echo "::error::Manual run ('workflow_dispatch') allowed only for 'main', not for '$BRANCH_NAME'."
              exit 1
            fi
            EVENT="create"
          fi

          # Define pushed or deleted branch name
          if [ "$EVENT" = "delete" ]; then
            BRANCH_NAME=$(jq -r .ref < "$GITHUB_EVENT_PATH")
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          fi

          echo "event=$EVENT" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Detect parent branch using Azure mirror tags
        id: parent
        run: |
          BRANCH_NAME="${{ steps.prep.outputs.branch_name }}"
          EVENT="${{ steps.prep.outputs.event }}"
      
          # For delete event, skip parent branch detection
          if [[ "$EVENT" == "delete" ]]; then
            echo "::notice::Delete event â€“ skipping parent branch detection."
            echo "parent_branch=" >> $GITHUB_OUTPUT
            exit 0
          fi
      
          PARENT_BRANCH=""
      
          echo "---- DEBUG ----"
          echo "BRANCH_NAME: $BRANCH_NAME"
          echo "EVENT: $EVENT"
      
          # If the branch is 'main', we do not need to detect the parent
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "::notice::Branch is 'main', skipping parent branch detection."
            echo "parent_branch=" >> $GITHUB_OUTPUT
            exit 0
          fi
      
          # 1. Try to detect the parent branch using .base_ref (reliable for Pull Request events)
          if jq -e '.base_ref' < $GITHUB_EVENT_PATH > /dev/null; then
            PARENT_BRANCH=$(jq -r '.base_ref' < $GITHUB_EVENT_PATH | sed 's#refs/heads/##')
            if [ -n "$PARENT_BRANCH" ]; then
              echo "::notice::Detected parent branch from .base_ref: $PARENT_BRANCH"
            fi
          fi
      
          # 2. Fallback: detect parent branch using Azure mirror tags
          if [ -z "$PARENT_BRANCH" ]; then
            echo "Attempting to detect parent branch using Azure mirror tags..."
            
            # Get current branch SHA
            CURRENT_SHA=$(git rev-parse HEAD)
            echo "Current branch SHA: $CURRENT_SHA"
      
            # Find all branches that have Azure mirror tags
            TAGGED_BRANCHES=()
            echo "Looking for branches with Azure mirror tags..."
            
            # Get all remote branches except the current one
            for branch in $(git for-each-ref --format='%(refname:short)' refs/remotes/origin/); do
              CANDIDATE="${branch#origin/}"
              # Skip the current branch
              if [[ "$CANDIDATE" != "$BRANCH_NAME" ]]; then
                # Check if this branch has an Azure mirror tag
                TAG_NAME="azure-mirror/${CANDIDATE}"
                if git tag -l "$TAG_NAME" | grep -q "^$TAG_NAME$"; then
                  TAGGED_BRANCHES+=("$CANDIDATE")
                  CANDIDATE_SHA=$(git rev-parse "origin/$CANDIDATE")
                  echo "Found branch with Azure mirror tag: $CANDIDATE (SHA: $CANDIDATE_SHA)"
                fi
              fi
            done
      
            echo "Branches with Azure mirror tags: ${TAGGED_BRANCHES[@]}"
      
            if [[ ${#TAGGED_BRANCHES[@]} -eq 0 ]]; then
              echo "::warning::No branches found with Azure mirror tags."
              echo "This might be the first branch being synced, or tags are missing."
              
              # Fallback to 'main' if it exists (for the very first sync)
              if git rev-parse --verify "origin/main" >/dev/null 2>&1; then
                PARENT_BRANCH="main"
                echo "::notice::Using 'main' as fallback parent (no tagged branches found)"
              else
                echo "::error::No tagged branches found and 'main' doesn't exist. Cannot determine parent."
                exit 1
              fi
            else
              # Strategy: Find tagged branches that could be parents
              SAME_SHA_PARENTS=()
              ANCESTOR_PARENTS=()
              
              for candidate in "${TAGGED_BRANCHES[@]}"; do
                CANDIDATE_SHA=$(git rev-parse "origin/$candidate")
                
                # Check if this branch could be a parent
                if [[ "$CANDIDATE_SHA" == "$CURRENT_SHA" ]]; then
                  # Same SHA - this is the most likely parent (branch was created from this point)
                  SAME_SHA_PARENTS+=("$candidate")
                  echo "Potential parent (same SHA): $candidate"
                else
                  # Different SHA - check if it's an ancestor
                  if git merge-base --is-ancestor "origin/$candidate" HEAD 2>/dev/null; then
                    ANCESTOR_PARENTS+=("$candidate")
                    echo "Potential parent (ancestor): $candidate"
                  fi
                fi
              done
      
              # PRIORITY 1: Prefer branches with same SHA (exact match)
              if [[ ${#SAME_SHA_PARENTS[@]} -gt 0 ]]; then
                # If main is among same SHA branches, prefer it
                for candidate in "${SAME_SHA_PARENTS[@]}"; do
                  if [[ "$candidate" == "main" ]]; then
                    PARENT_BRANCH="main"
                    echo "::notice::Selected 'main' as parent branch (same SHA, preferred)"
                    break
                  fi
                done
                
                # If main is not among same SHA branches, use the first one
                if [[ -z "$PARENT_BRANCH" ]]; then
                  PARENT_BRANCH="${SAME_SHA_PARENTS[0]}"
                  echo "::notice::Selected parent branch from same SHA match: $PARENT_BRANCH"
                fi
                
              # PRIORITY 2: Fall back to ancestor branches
              elif [[ ${#ANCESTOR_PARENTS[@]} -gt 0 ]]; then
                # Prefer 'main' if it's in the ancestor list
                for candidate in "${ANCESTOR_PARENTS[@]}"; do
                  if [[ "$candidate" == "main" ]]; then
                    PARENT_BRANCH="main"
                    echo "::notice::Selected 'main' as parent branch (ancestor, preferred)"
                    break
                  fi
                done
      
                # If main is not in the ancestor list, use the first available
                if [[ -z "$PARENT_BRANCH" ]]; then
                  PARENT_BRANCH="${ANCESTOR_PARENTS[0]}"
                  echo "::notice::Selected first available ancestor as parent: $PARENT_BRANCH"
                fi
              else
                # PRIORITY 3: If no ancestors found, include all tagged branches with same SHA as fallback
                for candidate in "${TAGGED_BRANCHES[@]}"; do
                  CANDIDATE_SHA=$(git rev-parse "origin/$candidate")
                  if [[ "$CANDIDATE_SHA" == "$CURRENT_SHA" ]]; then
                    SAME_SHA_PARENTS+=("$candidate")
                    echo "Fallback potential parent (same SHA): $candidate"
                  fi
                done
                
                if [[ ${#SAME_SHA_PARENTS[@]} -gt 0 ]]; then
                  PARENT_BRANCH="${SAME_SHA_PARENTS[0]}"
                  echo "::notice::Selected fallback parent from same SHA: $PARENT_BRANCH"
                else
                  echo "::error::No suitable parent found among tagged branches."
                  exit 1
                fi
              fi
            fi
          fi
      
          # Log the final result or fail if parent could not be detected
          if [[ -z "$PARENT_BRANCH" ]]; then
            echo "::error::Parent branch could not be detected for branch '$BRANCH_NAME' (not main). Aborting."
            exit 1
          else
            echo "::notice::Final detected PARENT_BRANCH: $PARENT_BRANCH"
          fi
      
          echo "parent_branch=${PARENT_BRANCH}" >> $GITHUB_OUTPUT

      - name: Sync branch to Azure DevOps
        id: azure_sync
        run: |
          set -e

          if [[ "${GITHUB_REPOSITORY_OWNER}" == "DodoSystem" ]]; then
            AZURE_REPO="Customers"
          else
            AZURE_REPO="Customers-${GITHUB_REPOSITORY_OWNER}"
          fi

          REPO_NAME="${{ steps.prep.outputs.repo_name }}"
          BRANCH_NAME="${{ steps.prep.outputs.branch_name }}"
          EVENT="${{ steps.prep.outputs.event }}"
          AZURE_BRANCH="${REPO_NAME}/${BRANCH_NAME}"
          PARENT_BRANCH="${{ steps.parent.outputs.parent_branch }}"
          AZURE_TAG_NAME="${REPO_NAME}.${BRANCH_NAME}"

          REFS_API="https://dev.azure.com/$AZURE_ORG/$AZURE_PROJECT/_apis/git/repositories/$AZURE_REPO/refs?api-version=7.1"

          echo "====================== BRANCH SYNC CONTEXT ======================"
          echo "Azure Repo name : $AZURE_REPO"
          echo "Github Repo name : $REPO_NAME"
          echo "Github Branch name : $BRANCH_NAME"
          echo "Event type : $EVENT"
          echo "Azure branch : $AZURE_BRANCH"
          echo "Detected parent : $PARENT_BRANCH"
          echo "Azure tag name : $AZURE_TAG_NAME"
          echo "==============================================================="

          echo "sync_success=false" >> $GITHUB_OUTPUT

          if [[ "$EVENT" == "create" ]]; then
            # Ensure the Azure branch does not already exist
            EXISTS=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/$AZURE_BRANCH" \
              | jq -r '.value | map(select(.name=="refs/heads/'"$AZURE_BRANCH"'")) | length')
            if [[ "$EXISTS" -gt "0" ]]; then
              echo "::error::Branch ${AZURE_BRANCH} already exists in Azure DevOps. Branch creation aborted."
              exit 1
            fi

            # Resolve the parent commit SHA to base the new branch on
            if [[ "$BRANCH_NAME" == "main" ]]; then
              PARENT_SHA=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/main" \
                | jq -r '.value[] | select(.name=="refs/heads/main") | .objectId')
              if [[ -z "$PARENT_SHA" || "$PARENT_SHA" == "null" ]]; then
                echo "::error::'main' branch does not exist in Azure DevOps repo. Cannot create initial branch."
                exit 1
              fi
              echo "::notice::[INFO] Parent SHA used: $PARENT_SHA (from Azure 'main')"
            else
              if [[ -z "$PARENT_BRANCH" ]]; then
                echo "::error::Parent branch could not be detected. Aborting."
                exit 1
              fi
              AZURE_PARENT_BRANCH="${REPO_NAME}/${PARENT_BRANCH}"
              PARENT_SHA=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/$AZURE_PARENT_BRANCH" \
                | jq -r '.value[] | select(.name=="refs/heads/'"$AZURE_PARENT_BRANCH"'") | .objectId')
              if [[ -z "$PARENT_SHA" || "$PARENT_SHA" == "null" ]]; then
                echo "::error::Parent branch '${AZURE_PARENT_BRANCH}' does not exist in Azure DevOps repo. Branch creation aborted."
                exit 1
              fi
              echo "::notice::[INFO] Parent SHA used: $PARENT_SHA (from branch '${AZURE_PARENT_BRANCH}')"
            fi

            # Tag the parent commit BEFORE creating the branch (single GET + single POST)
            # - GET current tag objectId (if any)
            EXISTING_TAG_SHA=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=tags/$AZURE_TAG_NAME" \
              | jq -r '.value[] | select(.name=="refs/tags/'"$AZURE_TAG_NAME"'") | .objectId')
            # - Choose oldObjectId: zeros for create, existing objectId for update
            if [[ -z "$EXISTING_TAG_SHA" || "$EXISTING_TAG_SHA" == "null" ]]; then
              OLD_OBJ="0000000000000000000000000000000000000000"
            else
              OLD_OBJ="$EXISTING_TAG_SHA"
            fi
            # - Create or move the tag to PARENT_SHA in one POST
            TAG_PAYLOAD='[{"name": "refs/tags/'"$AZURE_TAG_NAME"'", "oldObjectId": "'$OLD_OBJ'", "newObjectId": "'$PARENT_SHA'"}]'
            TAG_CODE=$(curl -s -u ":$AZURE_PAT" -w "%{http_code}" -o /tmp/tag_output "$REFS_API" -H "Content-Type: application/json" -d "$TAG_PAYLOAD")
            if [[ "$TAG_CODE" -ne 200 && "$TAG_CODE" -ne 201 ]]; then
              ERR=$(cat /tmp/tag_output)
              echo "::error::Failed to set tag '${AZURE_TAG_NAME}' to ${PARENT_SHA}. Error: $ERR"
              exit 1
            fi
            echo "::notice::âœ… CI tag '${AZURE_TAG_NAME}' now points to ${PARENT_SHA}."

            # Create the Azure branch from the resolved parent commit
            PAYLOAD='[{"name": "refs/heads/'"$AZURE_BRANCH"'", "oldObjectId": "0000000000000000000000000000000000000000", "newObjectId": "'$PARENT_SHA'"}]'
            RESPONSE=$(curl -s -u ":$AZURE_PAT" -w "%{http_code}" -o /tmp/curl_output "$REFS_API" -H "Content-Type: application/json" -d "$PAYLOAD")
            if [[ "$RESPONSE" -ne 200 && "$RESPONSE" -ne 201 ]]; then
              OUTPUT=$(cat /tmp/curl_output)
              echo "::error::Failed to create branch ${AZURE_BRANCH} in Azure DevOps. Error: $OUTPUT"
              exit 1
            fi
            echo "::notice::âœ… Branch '${AZURE_BRANCH}' created in Azure DevOps."

            echo "sync_success=true" >> $GITHUB_OUTPUT

          elif [[ "$EVENT" == "delete" ]]; then
            # Delete the Azure branch
            echo "::notice::[INFO] Deleting branch ${AZURE_BRANCH} from Azure Repos."
            RESULT=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/$AZURE_BRANCH")
            BRANCH_SHA=$(echo "$RESULT" | jq -r '.value[] | select(.name=="refs/heads/'"$AZURE_BRANCH"'") | .objectId')
            if [[ -z "$BRANCH_SHA" || "$BRANCH_SHA" == "null" ]]; then
              echo "::warning::Branch ${AZURE_BRANCH} does not exist in Azure DevOps. Skipping deletion."
              exit 0
            fi

            PAYLOAD='[{"name": "refs/heads/'"$AZURE_BRANCH"'", "oldObjectId": "'$BRANCH_SHA'", "newObjectId": "0000000000000000000000000000000000000000"}]'
            RESPONSE=$(curl -s -u ":$AZURE_PAT" -w "%{http_code}" -o /tmp/curl_output -X POST "$REFS_API" -H "Content-Type: application/json" -d "$PAYLOAD")
            if [[ "$RESPONSE" -ne 200 && "$RESPONSE" -ne 201 ]]; then
              OUTPUT=$(cat /tmp/curl_output)
              echo "::error::Failed to delete branch ${AZURE_BRANCH} from Azure DevOps. Error: $OUTPUT"
              exit 1
            fi

            CHECK=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=heads/$AZURE_BRANCH" \
              | jq -r '.value | map(select(.name=="refs/heads/'"$AZURE_BRANCH"'")) | length')
            if [[ "$CHECK" -gt "0" ]]; then
              echo "::error::Branch ${AZURE_BRANCH} still exists after deletion attempt. Most likely permission denied!"
              exit 1
            fi
            echo "::notice::âœ… Branch '${AZURE_BRANCH}' deleted in Azure DevOps."

            # Delete the CI tag if present
            TAG_RESULT=$(curl -s -u ":$AZURE_PAT" "$REFS_API&filter=tags/$AZURE_TAG_NAME")
            TAG_SHA=$(echo "$TAG_RESULT" | jq -r '.value[] | select(.name=="refs/tags/'"$AZURE_TAG_NAME"'") | .objectId')
            if [[ -z "$TAG_SHA" || "$TAG_SHA" == "null" ]]; then
              echo "::notice::Tag '${AZURE_TAG_NAME}' does not exist in Azure DevOps, nothing to remove."
            else
              TAG_DELETE_PAYLOAD='[{"name": "refs/tags/'"$AZURE_TAG_NAME"'", "oldObjectId": "'$TAG_SHA'", "newObjectId": "0000000000000000000000000000000000000000"}]'
              TAG_DELETE_RESPONSE=$(curl -s -u ":$AZURE_PAT" -w "%{http_code}" -o /tmp/tag_del_output -X POST "$REFS_API" -H "Content-Type: application/json" -d "$TAG_DELETE_PAYLOAD")
              if [[ "$TAG_DELETE_RESPONSE" -ne 200 && "$TAG_DELETE_RESPONSE" -ne 201 ]]; then
                TAG_DEL_OUT=$(cat /tmp/tag_del_output)
                echo "::error::Failed to delete tag '${AZURE_TAG_NAME}' in Azure DevOps. Error: $TAG_DEL_OUT"
                exit 1
              fi
              echo "::notice::âœ… CI tag '${AZURE_TAG_NAME}' deleted in Azure DevOps."
            fi
          fi
          

      - name: Tag GitHub branch as Azure-mirrored
        if: steps.azure_sync.outputs.sync_success == 'true' && steps.prep.outputs.event == 'create'
        run: |
          BRANCH_NAME="${{ steps.prep.outputs.branch_name }}"
          TAG_NAME="azure-mirror/${BRANCH_NAME}"
          
          echo "Creating Azure mirror tag: $TAG_NAME"
          
          # Configure git for tagging
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create tag pointing to current HEAD
          git tag "$TAG_NAME" HEAD
          
          # Push the tag to origin
          git push origin "$TAG_NAME"
          
          echo "::notice::âœ… Tagged branch '$BRANCH_NAME' with Azure mirror tag '$TAG_NAME'"

      - name: Remove Azure mirror tag on branch deletion
        if: steps.prep.outputs.event == 'delete'
        run: |
          BRANCH_NAME="${{ steps.prep.outputs.branch_name }}"
          TAG_NAME="azure-mirror/${BRANCH_NAME}"
          
          echo "Removing Azure mirror tag: $TAG_NAME"
          
          # Configure git for tag operations
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag exists and remove it
          if git tag -l "$TAG_NAME" | grep -q "^$TAG_NAME$"; then
            git tag -d "$TAG_NAME" 2>/dev/null || true
            git push origin ":refs/tags/$TAG_NAME" 2>/dev/null || true
            echo "::notice::âœ… Removed Azure mirror tag '$TAG_NAME'"
          else
            echo "::notice::Tag '$TAG_NAME' does not exist, nothing to remove"
          fi
